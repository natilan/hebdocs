עקרי אבטחת מידע

יש להתייחס ל-SQL Injections, Brute Force Attack ו- XSS (Cross-site scripting)
8 הטכניקות לבדיקות אבטחה
1. Access to Application גישה לאפליקציה

ע"י הגדרה של Roles and Right Management
בדיקת כל התפקידים במערכת וההרשאות הניתנות להם
Authentication - מי את/ה?
Authorization - מה את/ה יכול/ה לעשות?
חק מהבדיקות קשורות לבדיקות חוזק הסיסמא, לוגין, שינוי ושחזור סיסמא, לוג-אאוט וכו'
2. Data Protection הגנת המידע
היוזר יכול לראות ולהשתמש רק במידע שהוא אמור.
כיצד המידע שמור ב-DB, כל המידע אמור להיות מוצפן. בעיקר מידע כמו סיסמאות, כרטיסי אשראי וכיוצ'
כאשר מידע זורם בין מודולים הוא צריך להיות מאובטח או כאשר הוא מועבר לאפליקציות אחרות.
צריך לתשאל את ה-DB ל-passwords של המשתמשים, נתונים חשובונות ועוד מידע קריטי לעסק.
לבדוק שמידע שמועבר בין טפסים מוצפן כראוי. ושהוא Decrypted כראוי ביעד שלו. 
לוודא שהמידע מועבר בין קליינט לשרת הוא לא מוצג בשורת הכתובת של הדפדפן. 
לדוגמא: מאחר ש-HTPP הוא Clear Text Protocol, מידע רגיש מועבר והוא יכול להוות סכנת אבטחתית. במקום זאת, יש להשתמש ב-HTTPS (מאובטח דרך SSL, TSL Tunnel).

3. Brute Force Attack
בדרך נעשה ע"י כלי תוכנה התוכנה מנסה לנחש את הסיסמא ע"י כניסה שוב ושוב
ניתן להגן ע"י השהייה של החשבון אם יותר מ-X נסיונות כניסה נכשלו.
יש לבדוק שמנגנון השהייה כזה קיים ופועל.

4. SQL Injections ו- XSS (Cross Site Scripting)
נעשה שימוש בסקריפט זדוני ע"י האקרים בכדי לעשות מניפולציות באתר.
צריך למשל, כדי להתגונן, להגביל את אורך השדות.
למשל שדה שם משפחה צריך להיות מקסימום 30 תווים.
עבור שדות גדולים יש לעשות ולידציה לפני השליחה של המידע.
בשדות כאלה תגיות HTMP ו-Script צריכות להיות לא מורשות.
יש להיפטר מסקריפטים ממקור לא ידוע כדי להימנע מ-XSS.
5. Service Access Point
לדוגמא אפשר להגביל לפי כתובות IP. כדי לבדוק אם נקודת הגישה בטוחה יש לנסות להתחבר ממחשבים שונים, עם כתובות IP שונות (trusted ו-untrusted). אם נקודת הגישה מאפשרת העלאה של קבצים, יש לבוודא שיש מגבלת גודל על הקבצים וגם שהקבצים נסרקים לוירוסים.
6. Session Management
web session הוא רצף של בקשות ת-responses של HTTP המקושרות לאותו משתמש. בדיקות ניהול הסשן בודקות כיצד ניהול הסשן מטופל באפליקציית ה-Web.

אפשר לבדוק שהשסן יוצא מתוקף לאחר זמן מה ללא פעילות, אחרי לוגאאוט, לבדוק את ה-scope של העוגיות ומשכן. לבדוק אם משתמש יחיד יכול שיהיות לו מספר סשנים.
7. Error Handling
לבדוק קודי שגיאות 404, 400, 408. לוודא שבהתאם לסנריו קודי השגיאה המתאימים מופקים.
השגיאות חוזרות עם הודעות מפורטות. שלא יכילו מידע חשוב שיכול לשמש לפריצה.

8. Specific Risky Functionality
בעיקר תשלומים והעלאת קבצים. הפונקציונליות האלה חייבות להיבדק היטב. להעלאת קבצים, צריך לבדוק בעיקר אם יש הגבלה על העלאת קבצים זדוניים.
לתשלומים, צריך לבדוק בעיקר לחולשות של injection, אכסון קריפטוגרפי, buffer overflow, ניחוש סיסמאות וכו'
